#pragma once

#include <SharedBase/math/3d/ge_matrix3.h>
#include <SharedBase/math/3d/ge_vector.h>
#include <SharedBase/math/3d/ge_vector4.h>
#include <SharedBase/types/ge_def.h>
#include <SharedBase/types/ge_types.h>

class bCAxisAngle;
class bCEulerAngles;
class bCIStream;
class bCMotion;
class bCOStream;
class bCQuaternion;
class bCString;

class GE_DLLIMPORT bCMatrix
{
  public:
    static bCMatrix const &GE_STDCALL GetIdentity();
    static void GE_STDCALL GetIdentity(bCMatrix &);
    static bCMatrix const &GE_STDCALL GetZero();

  public:
    bCMatrix(bCMatrix const &);
    bCMatrix(bCAxisAngle const &, bCVector const &);
    bCMatrix(bCEulerAngles const &, bCVector const &);
    bCMatrix(bCQuaternion const &, bCVector const &);
    explicit bCMatrix(GEFloat);
    explicit bCMatrix(GEFloat const (*const)[4]);
    explicit bCMatrix(GEFloat const *const);
    explicit bCMatrix(bCVector4 const *const);
    explicit bCMatrix(bCVector const *const);
    bCMatrix();
    ~bCMatrix();

  public:
    bCMatrix &operator=(bCMatrix const &);
    bCOStream &operator>>(bCOStream &) const;
    bCIStream &operator<<(bCIStream &);
    GEBool operator==(bCMatrix const &) const;
    GEBool operator!=(bCMatrix const &) const;
    GEFloat &operator[](GEInt);
    GEFloat operator[](GEInt) const;
    bCMatrix operator*(bCMatrix const &) const;
    bCMatrix operator*(bCAxisAngle const &) const;
    bCMatrix operator*(bCEulerAngles const &) const;
    bCMatrix operator*(bCQuaternion const &) const;
    bCMatrix operator*(GEFloat) const;
    bCVector operator*(bCVector const &) const;
    bCMatrix operator-(bCMatrix const &) const;
    bCMatrix operator-() const;
    bCMatrix operator+(bCMatrix const &) const;
    bCMatrix operator/(GEFloat) const;
    GEFloat &operator()(GEInt, GEInt);
    bCVector &operator()(GEInt);
    bCVector const &operator()(GEInt) const;
    GEFloat operator()(GEInt, GEInt) const;
    bCMatrix operator~() const;
    bCMatrix &operator*=(bCMatrix const &);
    bCMatrix &operator*=(bCAxisAngle const &);
    bCMatrix &operator*=(bCEulerAngles const &);
    bCMatrix &operator*=(bCQuaternion const &);
    bCMatrix &operator*=(GEFloat);
    bCMatrix &operator+=(bCMatrix const &);
    bCMatrix &operator-=(bCMatrix const &);
    bCMatrix &operator/=(GEFloat);

  public:
    GEFloat &AccessElement(GEInt);
    GEFloat &AccessElement(GEInt, GEInt);
    bCVector &AccessTranslation();
    bCVector4 &AccessTranslation4();
    bCVector &AccessXAxis();
    bCVector4 &AccessXAxis4();
    bCVector &AccessYAxis();
    bCVector4 &AccessYAxis4();
    bCVector &AccessZAxis();
    bCVector4 &AccessZAxis4();
    void Add(bCMatrix const &);
    void Clear();
    void ClearRotation();
    void Divide(GEFloat);
    bCVector GetColumn(GEInt) const;
    void GetColumn(GEInt, bCVector4 &) const;
    void GetColumn(GEInt, bCVector &) const;
    void GetColumn(GEInt, GEFloat *const) const;
    bCVector4 GetColumn4(GEInt) const;
    GEFloat GetDeterminant() const;
    GEFloat GetDeterminantAdjoint(GEInt, GEInt) const;
    GEFloat GetDeterminantRotation() const;
    bCMatrix GetDifference(bCMatrix const &) const;
    void GetDifference(bCMatrix &, bCMatrix const &) const;
    GEFloat GetElement(GEInt) const;
    GEFloat GetElement(GEInt, GEInt) const;
    void GetElement(GEInt, GEFloat &) const;
    void GetElement(GEInt, GEInt, GEFloat &) const;
    bCMatrix GetInverted() const;
    void GetInverted(bCMatrix &) const;
    bCMatrix GetNegated() const;
    void GetNegated(bCMatrix &) const;
    bCMatrix GetOrthogonalized() const;
    void GetOrthogonalized(bCMatrix &) const;
    bCMatrix GetOrthonormalized() const;
    void GetOrthonormalized(bCMatrix &) const;
    bCMatrix GetProduct(bCMatrix const &) const;
    bCMatrix GetProduct(GEFloat) const;
    void GetProduct(bCMatrix &, bCMatrix const &) const;
    void GetProduct(bCMatrix &, GEFloat) const;
    bCMatrix GetProductPrefix(bCMatrix const &) const;
    void GetProductPrefix(bCMatrix &, bCMatrix const &) const;
    bCMatrix GetPureRotation() const;
    bCVector GetPureScaling() const;
    bCMatrix GetQuotient(GEFloat) const;
    void GetQuotient(bCMatrix &, GEFloat) const;
    bCMatrix GetRotated(bCAxisAngle const &) const;
    bCMatrix GetRotated(bCEulerAngles const &) const;
    bCMatrix GetRotated(bCQuaternion const &) const;
    void GetRotated(bCMatrix &, bCAxisAngle const &) const;
    void GetRotated(bCMatrix &, bCEulerAngles const &) const;
    void GetRotated(bCMatrix &, bCQuaternion const &) const;
    bCMatrix GetRotatedByAxisX(GEFloat) const;
    void GetRotatedByAxisX(bCMatrix &, GEFloat) const;
    bCMatrix GetRotatedByAxisY(GEFloat) const;
    void GetRotatedByAxisY(bCMatrix &, GEFloat) const;
    bCMatrix GetRotatedByAxisZ(GEFloat) const;
    void GetRotatedByAxisZ(bCMatrix &, GEFloat) const;
    bCMatrix GetRotatedByLocalAxisX(GEFloat) const;
    void GetRotatedByLocalAxisX(bCMatrix &, GEFloat) const;
    bCMatrix GetRotatedByLocalAxisY(GEFloat) const;
    void GetRotatedByLocalAxisY(bCMatrix &, GEFloat) const;
    bCMatrix GetRotatedByLocalAxisZ(GEFloat) const;
    void GetRotatedByLocalAxisZ(bCMatrix &, GEFloat) const;
    bCMatrix GetRotatedLocal(bCAxisAngle const &) const;
    bCMatrix GetRotatedLocal(bCEulerAngles const &) const;
    bCMatrix GetRotatedLocal(bCQuaternion const &) const;
    void GetRotatedLocal(bCMatrix &, bCAxisAngle const &) const;
    void GetRotatedLocal(bCMatrix &, bCEulerAngles const &) const;
    void GetRotatedLocal(bCMatrix &, bCQuaternion const &) const;
    bCMatrix GetRotation() const;
    void GetRotation(bCMatrix &) const;
    void GetRotation(bCMatrix3 &) const;
    bCMatrix3 GetRotation3() const;
    void GetRow(GEInt, GEFloat *const) const;
    bCMatrix GetSum(bCMatrix const &) const;
    void GetSum(bCMatrix &, bCMatrix const &) const;
    bCVector const &GetTranslation() const;
    void GetTranslation(bCVector4 &) const;
    void GetTranslation(bCVector &) const;
    bCVector4 const &GetTranslation4() const;
    bCVector const &GetXAxis() const;
    void GetXAxis(bCVector4 &) const;
    void GetXAxis(bCVector &) const;
    bCVector4 const &GetXAxis4() const;
    bCVector const &GetYAxis() const;
    void GetYAxis(bCVector4 &) const;
    void GetYAxis(bCVector &) const;
    bCVector4 const &GetYAxis4() const;
    bCVector const &GetZAxis() const;
    void GetZAxis(bCVector4 &) const;
    void GetZAxis(bCVector &) const;
    bCVector4 const &GetZAxis4() const;
    void Invert();
    GEBool IsEqual(bCMatrix const &) const;
    GEBool IsExcentric() const;
    GEBool IsIdentity() const;
    GEBool const IsOrthogonal() const;
    GEBool const IsOrthonormal() const;
    GEBool const IsValid() const;
    void LookAt(bCVector const &, bCVector const &);
    void LookAt(bCVector const &);
    void ModifyRotation(bCAxisAngle const &);
    void ModifyRotation(bCEulerAngles const &);
    void ModifyRotation(bCMatrix3 const &);
    void ModifyRotation(bCQuaternion const &);
    void ModifyRotationAxisX(GEFloat);
    void ModifyRotationAxisY(GEFloat);
    void ModifyRotationAxisZ(GEFloat);
    void ModifyScaling(bCVector const &);
    void ModifyScaling(GEFloat);
    void ModifyTranslation(bCVector const &);
    void ModifyXAxis(bCVector4 const &);
    void ModifyXAxis(bCVector const &);
    void ModifyYAxis(bCVector4 const &);
    void ModifyYAxis(bCVector const &);
    void ModifyZAxis(bCVector4 const &);
    void ModifyZAxis(bCVector const &);
    void Multiply(bCMatrix const &);
    void Multiply(GEFloat);
    void Negate();
    void Orthogonalize();
    void Orthonormalize();
    void PrintDebug(bCString &);
    void ReverseMultiply(bCMatrix const &);
    void Rotate(bCAxisAngle const &);
    void Rotate(bCEulerAngles const &);
    void Rotate(bCQuaternion const &);
    void RotateAxisX(GEFloat);
    void RotateAxisY(GEFloat);
    void RotateAxisZ(GEFloat);
    void RotateLocal(bCAxisAngle const &);
    void RotateLocal(bCEulerAngles const &);
    void RotateLocal(bCQuaternion const &);
    void RotateLocalAxisX(GEFloat);
    void RotateLocalAxisY(GEFloat);
    void RotateLocalAxisZ(GEFloat);
    void Scale(bCVector const &);
    void Scale(GEFloat);
    void SetElement(GEInt, GEInt, GEFloat);
    void SetElement(GEInt, GEFloat);
    void SetIdentity();
    void SetIdentityRotation();
    void SetMatrix(bCMatrix const &);
    void SetMatrix(bCAxisAngle const &, bCVector const &);
    void SetMatrix(bCEulerAngles const &, bCVector const &);
    void SetMatrix(bCMotion const &);
    void SetMatrix(bCQuaternion const &, bCVector const &);
    void SetMatrix(bCVector const &, bCEulerAngles const &, bCVector const &);
    void SetMatrix(bCVector const &, bCQuaternion const &, bCVector const &);
    void SetMatrix(GEFloat);
    void SetMatrix(GEFloat const (*const)[4]);
    void SetMatrix(GEFloat const *const);
    void SetMatrix(bCVector4 const *const);
    void SetMatrix(bCVector const *const);
    void SetRow(GEInt, bCVector4 const &);
    void SetRow(GEInt, bCVector const &);
    void SetRow(GEInt, GEFloat const *const);
    void SetToCrossProduct(bCVector const &);
    void SetToProduct(bCMatrix const &, bCMatrix const &);
    void SetToRotation(bCAxisAngle const &);
    void SetToRotation(bCEulerAngles const &);
    void SetToRotation(bCQuaternion const &);
    void SetToRotationAxisX(GEFloat);
    void SetToRotationAxisY(GEFloat);
    void SetToRotationAxisZ(GEFloat);
    void SetToScaling(bCVector const &);
    void SetToScaling(GEFloat);
    void SetToTranslation(bCVector const &);
    void SetXAxis(bCVector4 const &);
    void SetXAxis(bCVector const &);
    void SetYAxis(bCVector4 const &);
    void SetYAxis(bCVector const &);
    void SetZAxis(bCVector4 const &);
    void SetZAxis(bCVector const &);
    void Sub(bCMatrix const &);
    void Transpose();
    void TransposeRotation();

  protected:
    bCVector &AccessRow(GEInt);
    bCVector4 &AccessRow4(GEInt);
    bCMatrix GetInvertedExcentric() const;
    void GetInvertedExcentric(bCMatrix &) const;
    bCVector const &GetRow(GEInt) const;
    void GetRow(GEInt, bCVector4 &) const;
    void GetRow(GEInt, bCVector &) const;
    bCVector4 const &GetRow4(GEInt) const;
    void InvertExcentric();
    void ValidateReserved();

  private:
    bCVector4 m_XAxis;
    bCVector4 m_YAxis;
    bCVector4 m_ZAxis;
    bCVector4 m_Translation;
};
